#include "../gameboy.hpp"
#include "program-readers.hpp"

/*
* See http://gbdev.gg8.se/wiki/articles/Gameboy_Bootstrap_ROM
*
* Note: relative jumps numbers include the length of the jump
*       instructions (2 bytes).
*/
constexpr uint8_t bios[biosSize] = {
  // Set stack pointer to its initial value.
  0x31, 0xFE, 0xFF,             // 0x00: LD SP, 0xfffe

  // Zero-out VRAM.
  0xAF,                         // 0x03: XOR A
  0x21, 0xFF, 0x9F,             // 0x04: LD HL, 0x9fff
  0x32,                         // 0x07: LD (HL-), A
  0xCB, 0x7C,                   // 0x08: BIT 7, H
  0x20, 0xFB,                   // 0x0a: JR NZ, -3 (0x7)

  // Setup audio.
  0x21, 0x26, 0xFF,             // 0x0c: LD HL, 0xff26
  0x0E, 0x11,                   // 0x0f: LD C, 0x11
  0x3E, 0x80,                   // 0x11: LD A, 0x80
  0x32,                         // 0x13: LD (HL-), A
  0xE2,                         // 0x14: LD (C), A
  0x0C,                         // 0x15: INC C
  0xE2,                         // 0x18: LD (C), A
  0x3E, 0xF3,                   // 0x16: LD A, 0xf3
  0x32,                         // 0x19: LD (HL-), A
  0x3E, 0x77,                   // 0x1a: LD A, 0x77
  0x77,                         // 0x1c: LD (HL), A

  // Setup the background palette.
  0x3E, 0xFC,                   // 0x1d: LD A, 0xfc
  0xE0, 0x47,                   // 0x1f: LDH (ff47), A

  // Convert and load the Nintendo logo from the cartridge to VRAM.
  0x11, 0x04, 0x01,             // 0x21: LD DE, 0x104
  0x21, 0x10, 0x80,             // 0x24: LD HL, 0x8010
  0x1A,                         // 0x27: LD A, (DE)
  0xCD, 0x95, 0x00,             // 0x28: CALL 0x95
  0xCD, 0x96, 0x00,             // 0x2b: CALL 0x96
  0x13,                         // 0x2e: INC DE
  0x7B,                         // 0x2f: LD A, E
  0xFE, 0x34,                   // 0x30: CP 0x34
  0x20, 0xF3,                   // 0x32: JR NZ, -13 (0x27)
  0x11, 0xD8, 0x00,             // 0x34: LD DE, 0xd8
  0x06, 0x08,                   // 0x37: LD B, 0x08
  0x1A,                         // 0x39: LD A, (DE)
  0x13,                         // 0x3a: INC DE
  0x22,                         // 0x3b: LD (HL+), A
  0x23,                         // 0x3c: INC HL
  0x05,                         // 0x3d: DEC B
  0x20, 0xF9,                   // 0x3e: JR NZ, -7 (0x39)

  // Setup background tilemap.
  0x3E, 0x19,                   // 0x40: LD A, 0x19
  0xEA, 0x10, 0x99,             // 0x42: LD (0x9910), A
  0x21, 0x2F, 0x99,             // 0x45: LD HL, 0x992f
  0x0E, 0x0C,                   // 0x48: LD C, 0x0c
  0x3D,                         // 0x4a: DEC A
  0x28, 0x08,                   // 0x4b: JR Z, +10 (55)
  0x32,                         // 0x4d: LD (HL-), A
  0x0D,                         // 0x4e: DEC C
  0x20, 0xF9,                   // 0x4f: JR NZ, -7 (0x4a)
  0x2E, 0x0F,                   // 0x51: LD L, 0xf
  0x18, 0xF3,                   // 0x53: JR -13 (0x48)

  // Scroll logo and play sound.
  0x67,                         // 0x55: LD H, A
  0x3E, 0x64,                   // 0x56: LD A, 0x64
  0x57,                         // 0x58: LD D, A
  0xE0, 0x42,                   // 0x59: LDH (ff42), A
  0x3E, 0x91,                   // 0x5b: LD A, 0x91
  0xE0, 0x40,                   // 0x5d: LDH (ff40), A
  0x04,                         // 0x5f: INC B
  0x1E, 0x02,                   // 0x60: LD E, 0x2
  0x0E, 0x0C,                   // 0x62: LD C, 0x0c
  0xF0, 0x44,                   // 0x64: LD A, (0xff44)
  0xFE, 0x90,                   // 0x66: CP 0x90
  0x20, 0xFA,                   // 0x68: JR NZ, -6 (0x64)
  0x0D,                         // 0x6a: DEC C
  0x20, 0xF7,                   // 0x6b: JR NZ, -9 (0x64)
  0x1D,                         // 0x6d: DEC E
  0x20, 0xF2,                   // 0x6e: JR NZ, -14 (0x62)
  0x0E, 0x13,                   // 0x71: LD C, 0x13
  0x24,                         // 0x72: INC H
  0x7C,                         // 0x73: LD A, H
  0x1E, 0x83,                   // 0x74: LD E, 0x83
  0xFE, 0x62,                   // 0x76: CP 0x62
  0x28, 0x06,                   // 0x78: JR Z, +6 (80)
  0x1E, 0xC1,                   // 0x7a: LD E, 0xc1
  0xFE, 0x64,                   // 0x7c: CP 0x64
  0x20, 0x06,                   // 0x7e: JR NZ, +6 (86)
  0x7B,                         // 0x80: LD A, E
  0xE2,                         // 0x81: LD (C), A
  0x0C,                         // 0x82: INC C
  0x3E, 0x87,                   // 0x83: LD A, 0x87
  0xE2,                         // 0x85: LD (C), A
  0xF0, 0x42,                   // 0x86: LD A, (0xff42)
  0x90,                         // 0x88: SUB B
  0xE0, 0x42,                   // 0x89: LDH (ff42), A
  0x15,                         // 0x8b: DEC D
  0x20, 0xD2,                   // 0x8c: JR NZ, -46 (0x60)
  0x05,                         // 0x8e: DEC B
  0x20, 0x4F,                   // 0x8f: JR NZ, +81 (0xe0)
  0x16, 0x20,                   // 0x91: LD D, 0x20
  0x18, 0xCB,                   // 0x93: JR -53 (0x60)

  // Graphic routine.
  0x4F,                         // 0x95: LD C, A
  0x06, 0x04,                   // 0x96: LD B, 0x4
  0xC5,                         // 0x98: PUSH BC
  0xCB, 0x11,                   // 0x99: RL C
  0x17,                         // 0x9b: RLA
  0xC1,                         // 0x9c: POP BC
  0xCB, 0x11,                   // 0x9d: RL C
  0x17,                         // 0x9f: RLA
  0x05,                         // 0xa0: DEC B
  0x20, 0xF5,                   // 0xa1: JR NZ -11 (0x98)
  0x22,                         // 0xa3: LD (HL+), A
  0x23,                         // 0xa4: INC HL
  0x22,                         // 0xa5: LD (HL+), A
  0x23,                         // 0xa6: INC HL
  0xC9,                         // 0xa7: RET

  // Nintendo logo (0xa8).
  0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
  0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
  0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,

  // More video data (0xd8).
  0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,

  // Logo comparison routine.
  0x21, 0x04, 0x01,             // 0xe0: LD HL, 0x103
  0x11, 0xA8, 0x00,             // 0xe3: LD DE, 0xa8
  0x1A,                         // 0xe6: LD A, (DE)
  0x13,                         // 0xe7: INC DE
  0xBE,                         // 0xe8: CP (HL)
  0x20, 0xFE,                   // 0xe9: JR NZ -2 (0xe9)
  0x23,                         // 0xeb: INC HL
  0x7D,                         // 0xec: LD A, L
  0xFE, 0x34,                   // 0xed: CP 0x34
  0x20, 0xF5,                   // 0xee: -12 (0xe6)
  0x06, 0x19,                   // 0xf1: LD B, 0x19
  0x78,                         // 0xf3: LD A, B
  0x86,                         // 0xf4: ADD A, (HL)
  0x23,                         // 0xf5: INC HL
  0x05,                         // 0xf6: DEC B
  0x20, 0xFB,                   // 0xf7: JR NZ -5 (0xf4)
  0x86,                         // 0xf9: ADD A, (HL)
  0x20, 0xFE,                   // 0xfa: JR NZ -2 (0xfa)
  0x3E, 0x01,                   // 0xfc: LD A, 0x1
  0xE0, 0x50                    // 0xfe: LDH (ff50), A
};

uint8_t RomProgramReader::read(const Gameboy &gameboy, uint16_t address) const {
  return gameboy.cartridge->rom[address];
}

uint8_t BiosProgramReader::read(const Gameboy &, uint16_t address) const {
  return bios[address];
}
